---
title: "Cours 5 : Les mesures et les analyses statistiques"
subtitle: "Introduction aux m√©gadonn√©es en sciences sociales"
author: Laurence-Olivier M. Foisy
institute: Universit√© de Montr√©al
lang: fr
from: markdown+emoji
format:
  revealjs:
    mermaid: 
      theme: dark
    theme: simple
    logo: https://upload.wikimedia.org/wikipedia/en/thumb/4/4b/Universite_de_Montreal_logo.svg/1920px-Universite_de_Montreal_logo.svg.png
    footer: "[FAS1001](https://fas1001.com)"
    transition: slide
    transition-speed: fast
    code-fold: false
    code-overflow: wrap
bibliography: bibliography.bib
---

# Cours 5

- Retour sur le dernier cours
- Le prochain cours
- Mesurer des variables latentes
- Introduction √† la r√©gression lin√©aire

# Les variables latentes

## Introduction

### Qu'est-ce qu'une variable latente?

- Une caract√©ristique qui ne peut pas √™tre mesur√©e directement
- Doit √™tre inf√©r√©e √† partir d'autres variables observables
- Concept central en sciences sociales

## Exemple : Mesurer l'intelligence

```{mermaid}
%%{init: {"theme": "base", "themeVariables": {"primaryColor": "#f4f4f4", "textColor": "#333", "lineColor": "#666"}}}%%
mindmap
  root("Intelligence")
    ("Verbale")
      ("Vocabulaire")
      ("Compr√©hension")
    ("Math√©matique")
      ("Calcul")
      ("Logique")
    ("Spatiale")
      ("Visualisation")
      ("Orientation")
    ("Sociale")
      ("Empathie")
      ("Communication")
```

::: {.notes}
- L'intelligence est un concept multidimensionnel
- Chaque branche repr√©sente une facette diff√©rente
- Les tests doivent capturer cette complexit√©
:::

## D√©fi de mesure

### Pourquoi c'est complexe?

::: {.incremental}
1. **Abstraction** : Les concepts sont souvent abstraits
2. **Multidimensionnalit√©** : Plusieurs aspects √† consid√©rer
3. **Subjectivit√©** : Interpr√©tation variable selon le contexte
:::


# L'examen d'histoire

## Dans une classe typique...

```{r}
#| echo: false
#| fig-align: center
library(ggplot2)

# Simuler des notes d'examen
set.seed(123)
notes <- data.frame(
  Note = rnorm(100, mean = 75, sd = 10)
)

ggplot(notes, aes(x = Note)) +
  geom_histogram(binwidth = 5, fill = "#3182bd", alpha = 0.7) +
  geom_density(aes(y = ..count.. * 5), color = "#e6550d", size = 1) +
  labs(
    title = "Distribution des notes dans une classe",
    x = "Note (%)",
    y = "Nombre d'√©tudiants"
  ) +
  theme_minimal() +
  theme(
    text = element_text(size = 16),
    plot.title = element_text(size = 20, face = "bold")
  )
```

::: {.notes}
- Certains √©tudiants excellent naturellement
- D'autres sont dans la moyenne
- Certains ont plus de difficult√©
:::

## L'examen d'histoire : 5 questions {.smaller}

### Notre hypoth√®se
- Chaque question mesure la **comp√©tence en histoire**
- Les bons √©l√®ves devraient bien r√©pondre
- Les √©l√®ves moyens r√©pondront moyennement bien
- Les √©l√®ves en difficult√© auront plus de mal

## Distribution typique d'un examen {transition="none"}

```{r}
#| echo: false
#| fig-align: center
library(ggplot2)

# Simuler les donn√©es
set.seed(123)
n_students <- 100
performance <- rnorm(n_students, mean = 75, sd = 15)

# Version avec une seule distribution
ggplot(data.frame(Score = performance), aes(x = Score)) +
  geom_density(fill = "#3182bd", alpha = 0.7) +
  labs(
    x = "Note (%)",
    y = "Densit√©",
    title = "Distribution typique d'un examen"
  ) +
  theme_minimal()
```

## Distribution par groupes d'√©l√®ves {transition="none"}

```{r}
#| echo: false
#| fig-align: center

# Cr√©er les groupes
data <- data.frame(
  Score = performance,
  Groupe = cut(performance, 
              breaks = c(-Inf, 60, 80, Inf),
              labels = c("√âl√®ves en difficult√©", "√âl√®ves moyens", "Excellents √©l√®ves"),
              include.lowest = TRUE)
)

ggplot(data, aes(x = Score, fill = Groupe)) +
  geom_density(alpha = 0.7) +
  scale_fill_manual(values = c("#e6550d", "#fd8d3c", "#3182bd")) +
  labs(
    x = "Note (%)",
    y = "Densit√©",
    title = "Distribution par niveau"
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.title = element_blank()
  )
```

## Question 1 : Causes de la guerre {transition="none"}

"Quels √©v√©nements ont directement men√© au d√©clenchement de la Seconde Guerre Mondiale en Europe?"

```{r}
#| echo: false
#| fig-align: center

# M√™me distribution pour une bonne question
ggplot(data, aes(x = Score, fill = Groupe)) +
  geom_density(alpha = 0.7) +
  scale_fill_manual(values = c("#e6550d", "#fd8d3c", "#3182bd")) +
  labs(
    x = "Note (%)",
    y = "Densit√©",
    title = "Distribution des notes"
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.title = element_blank()
  )
```

## Question 2 : Analyse strat√©gique {transition="none"}

"Expliquez pourquoi l'op√©ration Barbarossa a √©t√© un tournant d√©cisif dans la guerre."

```{r}
#| echo: false
#| fig-align: center
# L√©g√®re variation mais m√™me pattern
set.seed(124)
performance2 <- rnorm(n_students, mean = 72, sd = 16)
data2 <- data.frame(
  Score = performance2,
  Groupe = cut(performance2, 
              breaks = c(-Inf, 60, 80, Inf),
              labels = c("√âl√®ves en difficult√©", "√âl√®ves moyens", "Excellents √©l√®ves"),
              include.lowest = TRUE)
)

ggplot(data2, aes(x = Score, fill = Groupe)) +
  geom_density(alpha = 0.7) +
  scale_fill_manual(values = c("#e6550d", "#fd8d3c", "#3182bd")) +
  labs(
    x = "Note (%)",
    y = "Densit√©",
    title = "Distribution des notes"
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.title = element_blank()
  )
```

## Question 3 : Impact √©conomique {transition="none"}

"Analysez comment la mobilisation industrielle des √âtats-Unis a influenc√© l'issue de la guerre."

```{r}
#| echo: false
#| fig-align: center
# Nouvelle distribution mais m√™me pattern
set.seed(125)
performance3 <- rnorm(n_students, mean = 73, sd = 14)
data3 <- data.frame(
  Score = performance3,
  Groupe = cut(performance3, 
              breaks = c(-Inf, 60, 80, Inf),
              labels = c("√âl√®ves en difficult√©", "√âl√®ves moyens", "Excellents √©l√®ves"),
              include.lowest = TRUE)
)

ggplot(data3, aes(x = Score, fill = Groupe)) +
  geom_density(alpha = 0.7) +
  scale_fill_manual(values = c("#e6550d", "#fd8d3c", "#3182bd")) +
  labs(
    x = "Note (%)",
    y = "Densit√©",
    title = "Distribution des notes"
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.title = element_blank()
  )

```

## Question 4 : Cons√©quences g√©opolitiques {transition="none"}

"√âvaluez comment les accord de Yalta ont redessin√© la carte politique de l'Europe."

```{r}
#| echo: false
#| fig-align: center
# Autre variation avec le m√™me pattern
set.seed(126)
performance4 <- rnorm(n_students, mean = 71, sd = 15)
data4 <- data.frame(
  Score = performance4,
  Groupe = cut(performance4, 
              breaks = c(-Inf, 60, 80, Inf),
              labels = c("√âl√®ves en difficult√©", "√âl√®ves moyens", "Excellents √©l√®ves"),
              include.lowest = TRUE)
)

ggplot(data4, aes(x = Score, fill = Groupe)) +
  geom_density(alpha = 0.7) +
  scale_fill_manual(values = c("#e6550d", "#fd8d3c", "#3182bd")) +
  labs(
    x = "Note (%)",
    y = "Densit√©",
    title = "Distribution des notes"
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.title = element_blank()
  )
```

## Question 5 : Cigares de Churchill {transition="none"}

"Quelle √©tait la marque de cigares pr√©f√©r√©e de Winston Churchill?"

```{r}
#| echo: false
#| fig-align: center

# Distribution invers√©e pour la question probl√©matique
performance_reversed <- 100 - performance + rnorm(n_students, mean = 0, sd = 5)
data_prob <- data.frame(
  Score = performance_reversed,
  Groupe = cut(performance, 
              breaks = c(-Inf, 60, 80, Inf),
              labels = c("√âl√®ves en difficult√©", "√âl√®ves moyens", "Excellents √©l√®ves"),
              include.lowest = TRUE)
)

ggplot(data_prob, aes(x = Score, fill = Groupe)) +
  geom_density(alpha = 0.7) +
  scale_fill_manual(values = c("#e6550d", "#fd8d3c", "#3182bd")) +
  labs(
    x = "Note (%)",
    y = "Densit√©",
    title = "Distribution invers√©e !"
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.title = element_blank()
  ) +
  annotate("text", x = 20, y = 0.02, 
           label = "Les meilleurs √©l√®ves\n√©chouent ?!", 
           color = "#e6550d", size = 4, fontface = "bold")
```
## Une question suspecte ü§î

### üö® Probl√®me!
Cette question mesure-t-elle vraiment la **comp√©tence en histoire**?

Ou mesure-t-elle autre chose?

- Culture populaire?
- Connaissance des cigares?

## Ce qui cloche...

- Les meilleurs √©l√®ves √©chouent myst√©rieusement
- Les √©l√®ves en difficult√© excellent soudainement
- La question ne mesure pas la comp√©tence en histoire

## En r√©sum√©

::::{.columns}

:::{.column width="50%"}

### Une bonne question d'histoire devrait:
  - Tester la compr√©hension historique
  - Montrer une distribution "normale"
  - Discriminer selon la comp√©tence

:::

:::{.column width="50%"}

### Une question probl√©matique peut:
  - Tester des connaissances non pertinentes
  - Montrer une distribution invers√©e
  - Ne pas refl√©ter la comp√©tence vis√©e

:::

::::


## Solution : Analyse factorielle

- D√©tecte automatiquement ces anomalies
- V√©rifie si toutes les questions mesurent la m√™me comp√©tence
- Aide √† am√©liorer la qualit√© des examens
- Guide la r√©vision des questions probl√©matiques


## L'analyse factorielle compare toutes les questions

```{r}
#| echo: false
#| fig-align: center
#| fig-width: 15
#| fig-height: 6

# Simuler les donn√©es pour toutes les questions
set.seed(123)
n_students <- 100

# Cr√©er les scores pour les 4 bonnes questions
q1 <- rnorm(n_students, mean = 75, sd = 15)  # Causes de la guerre
q2 <- rnorm(n_students, mean = 72, sd = 16)  # Barbarossa
q3 <- rnorm(n_students, mean = 73, sd = 14)  # Impact √©conomique
q4 <- rnorm(n_students, mean = 71, sd = 15)  # Yalta
# Question probl√©matique (inverse de q1)
q5 <- 100 - q1 + rnorm(n_students, mean = 0, sd = 5)

data <- data.frame(
  Question = rep(c("Causes", "Barbarossa", "√âconomie", "Yalta", "Cigares"), each = n_students),
  Score = c(q1, q2, q3, q4, q5),
  Type = rep(c("Bonne question", "Bonne question", "Bonne question", "Bonne question", "Question suspecte"), 
            each = n_students)
)

ggplot(data, aes(x = Score, fill = Type)) +
  geom_density(alpha = 0.5) +
  facet_wrap(~Question, nrow = 1) +
  scale_fill_manual(values = c("#3182bd", "#e6550d")) +
  labs(
    title = "Distribution des notes pour chaque question",
    x = "Note (%)",
    y = "Densit√©"
  ) +
  theme_minimal() +
  theme(
    text = element_text(size = 14),
    plot.title = element_text(size = 16, face = "bold"),
    legend.position = "bottom",
    strip.text = element_text(size = 12, face = "bold")
  )
```

## Comment √ßa marche?

::::{.columns}
:::{.column width="50%"}
### L'analyse factorielle v√©rifie
1. La corr√©lation entre les questions
2. Le pattern des r√©ponses
3. Les questions qui "d√©tonnent"
:::

:::{.column width="50%"}
### Nos r√©sultats
- **Questions 1-4** : ‚úÖ
  - Causes de la guerre
  - Op√©ration Barbarossa
  - Impact √©conomique
  - Accords de Yalta
- **Question 5** : ‚ùå
  - Cigares de Churchill
:::
::::

::: {.notes}
- Les 4 premi√®res questions mesurent bien la comp√©tence en histoire
- La question sur les cigares mesure autre chose (Connaissance des cigares? Culture populaire?)
- L'analyse factorielle d√©tecte automatiquement ces patterns
:::

## Exemple concret : L'attitude politique

```{mermaid}
%%{init: {"theme": "base", "themeVariables": {"primaryColor": "#f4f4f4", "textColor": "#333", "lineColor": "#666"}}}%%
graph TD
    A["Attitude Politique<br/>(Variable Latente)"]
    
    classDef latent fill:#e6f3ff,stroke:#3182bd,stroke-width:2px;
    
    class A latent;
```

## Exemple concret : L'attitude politique

```{mermaid}
%%{init: {"theme": "base", "themeVariables": {"primaryColor": "#f4f4f4", "textColor": "#333", "lineColor": "#666"}}}%%
graph TD
    A["Attitude Politique<br/>(Variable Latente)"] --> B["Opinion sur<br/>l'Immigration"]
    A --> C["Position sur<br/>l'√âconomie"]
    A --> D["Vision de<br/>l'Environnement"]
    
    classDef latent fill:#e6f3ff,stroke:#3182bd,stroke-width:2px;
    classDef indicator fill:#fff5eb,stroke:#e6550d,stroke-width:2px;
    
    class A latent;
    class B,C,D indicator;
```

## Exemple concret : L'attitude politique

```{mermaid}
%%{init: {"theme": "base", "themeVariables": {"primaryColor": "#f4f4f4", "textColor": "#333", "lineColor": "#666"}}}%%
graph TD
    A["Attitude Politique<br/>(Variable Latente)"] --> B["Opinion sur<br/>l'Immigration"]
    A --> C["Position sur<br/>l'√âconomie"]
    A --> D["Vision de<br/>l'Environnement"]
    
    B --> E["Question 1:<br/>Politique migratoire"]
    B --> F["Question 2:<br/>Int√©gration"]
    
    C --> G["Question 3:<br/>Imp√¥ts"]
    C --> H["Question 4:<br/>Intervention √âtat"]
    
    D --> I["Question 5:<br/>Climat"]
    D --> J["Question 6:<br/>R√©gulation"]
    
    classDef latent fill:#e6f3ff,stroke:#3182bd,stroke-width:2px;
    classDef indicator fill:#fff5eb,stroke:#e6550d,stroke-width:2px;
    classDef question fill:#f0f0f0,stroke:#636363,stroke-width:1px;
    
    class A latent;
    class B,C,D indicator;
    class E,F,G,H,I,J question;
```

## Exemple concret : L'attitude politique

```{mermaid}
%%{init: {"theme": "base", "themeVariables": {"primaryColor": "#f4f4f4", "textColor": "#333", "lineColor": "#666"}}}%%
graph TD
    A["Attitude Politique<br/>Gauche!"] --> B["Opinion sur<br/>l'Immigration"]
    A --> C["Position sur<br/>l'√âconomie"]
    A --> D["Vision de<br/>l'Environnement"]
    
    B --> E["Question 1:<br/>Politique migratoire"]
    B --> F["Question 2:<br/>Int√©gration"]
    
    C --> G["Question 3:<br/>Imp√¥ts"]
    C --> H["Question 4:<br/>Intervention √âtat"]
    
    D --> I["Question 5:<br/>Climat"]
    D --> J["Question 6:<br/>R√©gulation"]

    E --> K["En Faveur de plus d'immigrants"]
    F --> L["En Faveur de l'int√©gration"]

    G --> M["En Faveur de l'augmentation"]
    H --> N["En Faveur de plus d'intervention"]

    I --> O["Enjeu important"]
    J --> P["En Faveur de plus de r√©gulation"]
    
    classDef latent fill:#e6f3ff,stroke:#3182bd,stroke-width:2px;
    classDef indicator fill:#fff5eb,stroke:#e6550d,stroke-width:2px;
    classDef question fill:#f0f0f0,stroke:#636363,stroke-width:1px;
    
    class A latent;
    class B,C,D indicator;
    class E,F,G,H,I,J,K,L,M,N,O,P question;
```

## Un exemple concret

### Les Rednecks

- Est-ce que l'√©ducation influence la probabilit√© d'√™tre un "redneck"?
- Aucun question ne demande directement si quelqu'un est un "redneck"
- Mais on peut inf√©rer ce statut √† partir d'autres variables
- Cr√©er une variable de "redneckitude"

## Solution : Les √©chelles de mesure {.smaller}

::::{.columns}

:::{.column width="50%"}

### Comment proc√©der?

1. **Identifier les dimensions cl√©s**
   - D√©composer le concept
   - D√©finir les aspects mesurables

2. **Cr√©er des indicateurs**
   - Questions pr√©cises
   - Observations concr√®tes

3. **Valider l'√©chelle**
   - Fiabilit√© : Tests statistiques
   - Validit√© : Th√©orique

:::

:::{.column width="50%"}

```{mermaid}
%%{init: {"theme": "base", "themeVariables": {"primaryColor": "#f4f4f4", "textColor": "#333", "lineColor": "#666"}}}%%
graph LR
    A["<b>Fr√©quence d'aller chasser</b><br/>0 - Jamais<br/>0.5 - Des fois<br/>1 - Souvent"] --> B["<b>Redneckitude</b><br/>0 - Pas redneck<br/>0.5 - Moyen redneck<br/>1 - Tr√®s redneck"]
    C["<b>Poss√®de des armes √† feu</b><br/>0 - Aucune<br/>0.5 - Un peu<br/>1 - Beaucoup"] --> B
    D["<b>Conduit un pickup</b><br/>0 - non<br/>1 - oui"] --> B    
   
    classDef latent fill:#e6f3ff,stroke:#3182bd,stroke-width:2px;
    classDef indicator fill:#fff5eb,stroke:#e6550d,stroke-width:2px;
    
    class B latent;
    class A,C,D indicator;
```
:::

::::

# √âvaluation de la qualit√©

## Crit√®res essentiels {transition="none"}

```{mermaid}
%%{init: {"theme": "base", "themeVariables": {"primaryColor": "#f4f4f4", "textColor": "#333", "lineColor": "#666"}, "flowchart": {"nodeSpacing": 200, "rankSpacing": 150, "diagramPadding": 50, "htmlLabels": true}}}%%
graph LR
    A[<div style='width: 200px'>Qualit√© de<br/>la mesure</div>] --> B[<div style='width: 150px'>Fiabilit√©</div>]
    A --> C[<div style='width: 150px'>Validit√©</div>]
  
```

## Crit√®res essentiels {transition="none"}

```{mermaid}
%%{init: {"theme": "base", "themeVariables": {"primaryColor": "#f4f4f4", "textColor": "#333", "lineColor": "#666"}, "flowchart": {"nodeSpacing": 200, "rankSpacing": 150, "diagramPadding": 50, "htmlLabels": true}}}%%
graph LR
    A[<div style='width: 200px'>Qualit√© de<br/>la mesure</div>] --> B[<div style='width: 150px'>Fiabilit√©</div>]
    A --> C[<div style='width: 150px'>Validit√©</div>]
    
    B --> D[<div style='width: 150px'>Statistique</div>]
```

## Crit√®res essentiels {transition="none"}

```{mermaid}
%%{init: {"theme": "base", "themeVariables": {"primaryColor": "#f4f4f4", "textColor": "#333", "lineColor": "#666"}, "flowchart": {"nodeSpacing": 200, "rankSpacing": 150, "diagramPadding": 50, "htmlLabels": true}}}%%
graph LR
    A[<div style='width: 200px'>Qualit√© de<br/>la mesure</div>] --> B[<div style='width: 150px'>Fiabilit√©</div>]
    A --> C[<div style='width: 150px'>Validit√©</div>]
    
    B --> D[<div style='width: 150px'>Statistique</div>]
    
    C --> E[<div style='width: 150px'>Th√©orique</div>]
```

## La fiabilit√©

### Comment la mesurer?


## Trois mesures statistiques

1. **Alpha de Cronbach**
2. **Premi√®re valeur propre (Eigenvalue)**
3. **Coefficient de saturation (Factor loading)**

# L'Alpha de Cronbach

## Qu'est-ce que c'est?
- Une mesure de la **coh√©rence interne** d'un ensemble de questions
- Indique si les questions mesurent bien la m√™me chose
- Varie entre 0 et 1 (plus c'est proche de 1, meilleur c'est)

## Exemple Simple
- Imaginons un questionnaire sur la satisfaction au travail avec 4 questions :
  - "J'aime mon travail"
  - "Je suis heureux au bureau"
  - "Mon travail me satisfait"
  - "Je m'√©panouis dans mon travail"
- Si les r√©ponses sont coh√©rentes entre elles ‚Üí Alpha √©lev√©
- Si les r√©ponses sont contradictoires ‚Üí Alpha faible

## En pratique
- Alpha > 0.6 : Acceptable
- Alpha > 0.7 : Bon
- Alpha > 0.8 : Excellent

# La Premi√®re Valeur Propre (First Eigenvalue)

## Qu'est-ce que c'est?
- Indique la **force du concept principal** mesur√© par vos questions
- Plus elle est √©lev√©e, plus vos questions mesurent un concept unique et fort

## Analogie Simple
- Imaginez que vous prenez une photo de groupe :
  - Si tout le monde regarde dans la m√™me direction ‚Üí Forte premi√®re valeur propre
  - Si chacun regarde dans une direction diff√©rente ‚Üí Faible premi√®re valeur propre

## En pratique
- Valeur > 1 : Acceptable
- Plus la valeur est √©lev√©e, plus c'est fiable
- Indique qu'il y a un "facteur dominant" dans vos questions

# Le Coefficient de Saturation (Factor Loading)

## Qu'est-ce que c'est?
- Mesure la **contribution** de chaque question au concept g√©n√©ral
- Indique si chaque question est pertinente

## Exemple Simple
- Pour un questionnaire sur "l'amour des chats" :
  - "J'aime caresser les chats" ‚Üí Fort coefficient (pertinent)
  - "Je mange des p√¢tes" ‚Üí Faible coefficient (non pertinent)

## En pratique
- Coefficient > 0.3 : Acceptable
- Permet d'identifier les questions √† garder ou √† supprimer
- Plus le coefficient est √©lev√©, plus la question est pertinente

# En R√©sum√©

## Les trois mesures travaillent ensemble
- **Alpha de Cronbach** : Coh√©rence globale
- **Premi√®re valeur propre** : Force du concept principal
- **Coefficient de saturation** : Pertinence de chaque question

## Utilisation pratique

1. **Alpha de Cronbach** : > 0.6
2. **Premi√®re valeur propre (Eigenvalue)** : > 1
3. **Coefficient de saturation (Factor loading)** : > 0.3

## Comment faire 

### 1. Installer le package sondr

```r
# Dans la console:
install.packages("devtools")
devtools::install_github("ellipse-science/sondr")
```

## Comment faire ?

### 2. Charger vos donn√©es

```r
library(dplyr)
library(tidyr)

df <- read.csv("data.csv")
```
### 3. D√©terminer les variables potentielles

```r
r$> names(df)
 [1] "ses_gender"                        "ses_income"                        "ses_housing"                       "ses_language"                     
 [5] "ses_religion"                      "ses_education"                     "ses_ethnicity"                     "ses_immigrant"                    
 [9] "ses_skin_tone"                     "lifestyle_pets"                    "lifestyle_album"                   "lifestyle_movie"                  
[13] "lifestyle_prius"                   "ses_postal_code"                   "lifestyle_coffee"                  "lifestyle_gpt_freq"               
[17] "lifestyle_transport"               "lifestyle_yoga_freq"               "lifestyle_guns_number"             "lifestyle_classic_meal"           
[21] "lifestyle_fishing_freq"            "lifestyle_hunting_freq"            "ses_sexual_orientation"            "lifestyle_eat_meat_freq"          
[25] "lifestyle_clothing_style"          "lifestyle_motorized_freq"          "lifestyle_videogame_freq"          "lifestyle_alcohol_favorite"       
[29] "ses_religiosity_importance"        "lifestyle_nonmotorized_freq"       "lifestyle_watch_soccer_freq"       "lifestyle_movie_barbenheimer"     
[33] "lifestyle_watch_baseball_freq"     "lifestyle_volunteeringsocial_freq"
```
## Comment faire ?{.smaller}

### 4. Cleaner les variables √† √©valuer pour qu'elles soient num√©riques

```r
df_clean <- data.frame(id = 1:nrow(df))

# Variable de fr√©quence de p√™che
table(df$lifestyle_fishing_freq)
df_clean$lifestyle_fishing_freq_scale<- NA
df_clean$lifestyle_fishing_freq_scale[df$lifestyle_fishing_freq == "Never"] <- 0    
df_clean$lifestyle_fishing_freq_scale[df$lifestyle_fishing_freq == "Almost never"] <- 0.25
df_clean$lifestyle_fishing_freq_scale[df$lifestyle_fishing_freq == "Sometimes"] <- 0.5
df_clean$lifestyle_fishing_freq_scale[df$lifestyle_fishing_freq == "Often"] <- 0.75
df_clean$lifestyle_fishing_freq_scale[df$lifestyle_fishing_freq == " Very often"] <- 1
table(df_clean$lifestyle_fishing_freq_scale, useNA = "ifany")

saveRDS(df_clean, "data_clean.rds")
```

## Comment faire ? {.smaller}

::::{.columns}

:::{.column width="55%"}

### 2. Isoler les variables √† √©valuer

```r

# S√©lectionner les variables √† √©valuer
df_fa <- df %>%
  select(lifestyle_fishing_scale, 
         lifestyle_hunting_scale, 
         lifestyle_guns_number_scale,
         lifestyle_motorized_scale, 
         lifestyle_pickup_scale,
         lifestyle_eat_meat_scale) %>%
  drop_na() # Supprimer les valeurs manquantes

```

:::

:::{.column width="45%"}

### 3. Conditions √† respecter

1. Un dataframe contenant uniquement les variables √† √©valuer
2. AUCUNE valeur manquante
3. La m√™me √©chelle de mesure pour toutes les questionc (0-1)
4. La m√™me orientation pour tous les items (positif ou n√©gatif) 

:::

::::


## Comment faire ? {.smaller}

::::{.columns}

:::{.column width="35%"}

### 2. Utiliser la fonction 

`sondr::topdown_fa()`

```r
# Lancer l'analyse
sondr::topdown_fa(df_fa)
```

:::

:::{.column width="65%"}

![](img/redneck_scale_bad.png)

:::

::::

## Comment faire ? {.smaller}

::::{.columns}

:::{.column width="40%"}

### R√©esayer 

Essaie erreur jusqu'√† trouver une combinaison gagnante

```r
# Supprimer les variables 
# non pertinentes
df_fa <- df_fa %>%
  select(-c(lifestyle_eat_meat_scale, 
            lifestyle_pickup_scale)) 

# Relancer l'analyse
sondr::topdown_fa(df_fa)

```

:::

:::{.column width="60%"}

![](img/redneck_scale.png)

:::

::::


## La validit√©?

### Comment la mesurer?

1. **Concordance avec la th√©orie**
  - Les questions mesurent-elles bien le concept?
  - Les r√©sultats sont-ils coh√©rents avec la litt√©rature?

2. **Concordance avec d'autres mesures**
  - Les r√©sultats sont-ils similaires √† d'autres √©chelles?
  - Les r√©sultats sont-ils stables dans le temps?

## Faire l'√©chelle

### Si la fiabilit√© et la validit√© sont acceptables

```R
df$scale_redneck <- NA
df$scale_redneck <- (df$lifestyle_motorized_freq_scale +
                    df$lifestyle_hunting_freq_scale +
                    df$lifestyle_fishing_freq_scale +
                    df$lifestyle_pickup_scale +
                    df$lifestyle_guns_number_scale) / 5
table(df$scale_redneck)
hist(df$scale_redneck)

saveRDS(df, "data_scale.rds")
```

## df$scale_redneck

![](img/redneck_scale_hist.png)

# Conclusion

::: {.incremental}
1. Les variables latentes sont omnipr√©sentes en sciences sociales
2. La mesure n√©cessite une approche syst√©matique
3. La validation est cruciale pour la qualit√©
:::

# Regression lin√©aire

$$
\begin{aligned}
y &= \beta_0 + \beta_1x + \epsilon \\
\end{aligned}
$$

```r
model <- lm(df$y ~ df$x, data = df) # Une seule ligne de code!
```

## Qu'est-ce que c'est?

- Un outil pour comprendre la relation entre deux variables
- Permet de pr√©dire une variable √† partir d'une autre
- Trouve la "meilleure ligne" qui repr√©sente cette relation

## Visualisation de la r√©gression {.smaller}

```{r historical-plot}
#| echo: false
#| warning: false
#| message: false
library(ggplot2)
library(dplyr)

# Create example data for height prediction
set.seed(123)
n <- 50
father_height <- rnorm(n, 175, 7)
# Using slope of 0.5 to demonstrate regression to mean
son_height <- 0.5 * father_height + rnorm(n, 85, 5)
height_data <- data.frame(father = father_height, son = son_height)

# Add reference line data
ref_data <- data.frame(
  x = c(min(father_height), max(father_height)),
  y = c(min(father_height), max(father_height))
)

ggplot(height_data, aes(x = father, y = son)) +
  # Add reference line first (what Galton expected)
  geom_line(data = ref_data, aes(x = x, y = y), 
            color = "gray", linetype = "dashed", size = 1) +
  geom_point(alpha = 0.6, color = "#1f77b4") +
  geom_smooth(method = "lm", color = "#d62728", se = FALSE) +
  labs(
    title = "La d√©couverte de Galton",
    subtitle = "Ligne pointill√©e: ce qu'il attendait (pente = 1)\nLigne rouge: ce qu'il a observ√© (pente < 1)",
    x = "Taille du p√®re (cm)",
    y = "Taille du fils (cm)"
  ) +
  theme_minimal() +
  theme(
    text = element_text(size = 12),
    plot.title = element_text(size = 16, face = "bold"),
    plot.subtitle = element_text(size = 12)
  ) +
  annotate("text", x = 185, y = 165, 
           label = "R√©gression\nvers la moyenne", 
           color = "#d62728", 
           size = 4)
```

## Comment √ßa marche? {.smaller transition="none"}

```{r}
#| echo: false
#| warning: false
#| message: false

# Create example data for intuitive understanding
set.seed(456)
x <- seq(1, 10, length.out = 30)
y <- 2 * x + rnorm(30, 0, 1.5)
intuitive_data <- data.frame(x = x, y = y)

ggplot(intuitive_data, aes(x = x, y = y)) +
  geom_point(color = "#1f77b4", size = 3) +
  labs(
    title = "La r√©gression trouve la meilleure ligne",
    subtitle = "Elle minimise la distance entre les points et la ligne",
    x = "Variable X",
    y = "Variable Y"
  ) +
  theme_minimal() +
  theme(
    text = element_text(size = 12),
    plot.title = element_text(size = 16, face = "bold"),
    plot.subtitle = element_text(size = 12)
  )
```

::: {.notes}
La r√©gression trouve la ligne qui passe "au mieux" √† travers les points.
Plus les points sont proches de la ligne, meilleure est la r√©gression.
:::

## Comment √ßa marche? {.smaller transition="none"}

```{r}
#| echo: false
#| warning: false
#| message: false

ggplot(intuitive_data, aes(x = x, y = y)) +
  geom_smooth(method = "lm", color = "#d62728", se = FALSE) +
  geom_point(color = "#1f77b4", size = 3) +
  geom_segment(
    aes(xend = x, yend = predict(lm(y ~ x))),
    color = "darkgray",
    linetype = "dashed"
  ) +
  labs(
    title = "La r√©gression trouve la meilleure ligne",
    subtitle = "Elle minimise la distance entre les points et la ligne",
    x = "Variable X",
    y = "Variable Y"
  ) +
  theme_minimal() +
  theme(
    text = element_text(size = 12),
    plot.title = element_text(size = 16, face = "bold"),
    plot.subtitle = element_text(size = 12)
  )
```

## Comment √ßa marche? {.smaller transition="none"}

```{r}
#| echo: false
#| warning: false
#| message: false

# Create example data for intuitive understanding
set.seed(456)
x <- seq(1, 10, length.out = 30)
y <- 2 * x + rnorm(30, 0, 1.5)
intuitive_data <- data.frame(x = x, y = y)

ggplot(intuitive_data, aes(x = x, y = y)) +
  geom_point(color = "#1f77b4", size = 3) +
  geom_smooth(method = "lm", color = "#d62728", se = TRUE) +
  labs(
    title = "La r√©gression trouve la meilleure ligne",
    subtitle = "Elle minimise la distance entre les points et la ligne",
    x = "Variable X",
    y = "Variable Y"
  ) +
  theme_minimal() +
  theme(
    text = element_text(size = 12),
    plot.title = element_text(size = 16, face = "bold"),
    plot.subtitle = element_text(size = 12)
  )
```

## Pourquoi utiliser la r√©gression?

- Comprendre les relations entre variables
- Pr√©dire des valeurs futures
- Tester des hypoth√®ses scientifiques
- Contr√¥ler pour plusieurs facteurs √† la fois

## R√©gression

```r
model <- lm(df$ses_education ~ df$redneck_scale)

summary(model)

modelsummary::modelsummary(
  model,
  output = "results/tables/regression.md",
  stars = TRUE,
  title = "R√©gression lin√©aire simple"
)
```
## {transition="none"}

![](img/00_regression.png) 

## {transition="none"}

![](img/01_regression.png)

## {transition="none"}

![](img/02_regression.png)

## {transition="none"}

![](img/03_regression.png)

## {transition="none"}

![](img/04_regression.png)

## {transition="none"}

![](img/05_regression.png)

## {transition="none"}

![](img/06_regression.png)

## {transition="none"}

![](img/07_regression.png)

## {transition="none"}

![](img/08_regression.png)

## {transition="none"}

![](img/09_regression.png)

## {transition="none"}

![](img/10_regression.png)

## {transition="none"}

![](img/11_regression.png)

## {transition="none"}

![](img/12_regression.png)


## Points cl√©s √† retenir

::: {.incremental}
1. Toujours explorer vos donn√©es avant l'analyse
2. Interpr√©ter les r√©sultats avec prudence
3. Visualiser pour mieux comprendre
:::


# La grammaire des graphiques

## Les composants de base

```{mermaid}
%%{init: {"theme": "base"}}%%
graph LR
    A[Donn√©es] --> B[Aesthetics]
    B --> C[G√©om√©tries]
    C --> D[Facettes]
    D --> E[Th√®mes]
```

## Structure d'un graphique ggplot2

```r
ggplot(data = df,       # 1. Donn√©es
       aes(x = x,       # 2. Mapping esth√©tique
           y = y)) +    
  geom_point() +       # 3. G√©om√©trie
  theme_minimal()      # 4. Th√®me
```

# Types de graphiques fondamentaux

## Le nuage de points

```r
# Simple
ggplot(data, aes(x = age, y = revenu)) +
  geom_point()

# Am√©lior√©
ggplot(data, aes(x = age, y = revenu, color = education)) +
  geom_point(alpha = 0.6) +
  theme_minimal() +
  labs(title = "Revenu selon l'√¢ge et l'√©ducation",
       x = "√Çge",
       y = "Revenu")
```

## L'histogramme

```r
# Simple
ggplot(data, aes(x = age)) +
  geom_histogram()

# Am√©lior√©
ggplot(data, aes(x = age, fill = education)) +
  geom_histogram(position = "dodge", 
                binwidth = 5,
                alpha = 0.7) +
  theme_minimal() +
  scale_fill_brewer(palette = "Set2")
```

## Le graphique en barres

```r
# Simple
ggplot(data, aes(x = education)) +
  geom_bar()

# Am√©lior√©
ggplot(data, aes(x = education, fill = gender)) +
  geom_bar(position = "dodge") +
  coord_flip() +
  theme_minimal()
```

# Personnalisation

## Les couleurs

```r
# Palette manuelle
ggplot(data, aes(x = education, fill = gender)) +
  geom_bar() +
  scale_fill_manual(values = c("#E69F00", "#56B4E9"))

# Palette RColorBrewer
ggplot(data, aes(x = education, fill = gender)) +
  geom_bar() +
  scale_fill_brewer(palette = "Set1")
```

## Les th√®mes

```r
# Th√®me minimal
ggplot(data, aes(x = age, y = revenu)) +
  geom_point() +
  theme_minimal()

# Th√®me personnalis√©
ggplot(data, aes(x = age, y = revenu)) +
  geom_point() +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    axis.title = element_text(size = 12),
    legend.position = "bottom"
  )
```

# Graphiques avanc√©s

## Facettes

```r
ggplot(data, aes(x = age, y = revenu)) +
  geom_point() +
  facet_wrap(~education) +
  theme_minimal()
```

## Combinaison de g√©om√©tries

```r
ggplot(data, aes(x = age, y = revenu)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "lm") +
  facet_wrap(~education) +
  theme_minimal()
```

## Points cl√©s √† retenir

::: {.incremental}
1. ggplot2 utilise une grammaire des graphiques coh√©rente
2. Construire les graphiques couche par couche
3. La personnalisation est puissante mais simple
4. Toujours penser √† la lisibilit√©
:::
